#################################################################------GROOVY VS JAVA ------####################################################################
1. In Java we have to import class or packages to use it dedicated feature for out programing but in groovy it is not required to import the 
Basic Packages or classes as it is bydefault internally imported by groovy itself so that extra import code get reduce.
	for example :: to use Date Object in java we have to import util.Date Class but in groovy it is bydefault imported.

2. In Jave Bydefault Default access modifier is applied if we didn't specifiy any access modifier in it but in groovy every thing bydefault is
public so we don't need to define it explicitly. (only use other access modifier if required such as private or protected one)
	for example :: In Java public int a but in Groovy int a

3. In Java if we have to return anything from method then we have to use return keyword with that return thing but in groovy last line of your 
logic is treated bydefualt as return so we don't need to explicitly user return keyword there. 
(here, we talk about only return method having type except then void )
	For Example :: In Java int abc() { return 2; } but in groovy int abc() { 2 }

4. In Java Semicolons are neccessary and required to terminate the statement or LOC but in Groovy it is Optional.

5. In Java Getter/Setters are required to get and set the Properties value of the Java Class 
(So if any property get change then its respective getter/setter also need to modify)
But in Groovy we didn't need to explicitly specified getter/setters as it is internally generated by groovy itself.
(So if any property get change then we don't need to modified its getter/setter as it internally done by groovy itself)

6. In Java we can create one or more then one parameterized constructor as per our requirement.
but in groovy as we used named parameters so we don't need to create one or more parameterized constructor as we can manage it at the time of Object Creation.
	for example :: 	In Java suppose we have two parameterized constructor in a class such as 
				1.User(String firstName, String lastName) { this.firstName = firstName; this.lastName = lastName; }
					User user = new User("Naveen", "Jain")
				2.User(String firstName, String lastName, int age) { this.firstName = firstName; this.lastName = lastName;  this.age = age; }
					User user = new User("Naveen", "Jain", 25)
			But in Groovy we didn't need to create it explicitly as we just create object through named parameters such as
				1. def user = new User(firstName: "Naveen", lastName: "Jain")
				2. def user = new User(firstName: "Naveen", lastName: "Jain", age: 25)

7. In Java we can override the toString Method to convert object into string otherwise it is return Object Name 
but in Groovy same thing is done by just adding the @groovy.tranform.ToString annotation at the top of the Class.

8. In Java if two floats are involved in operation then the result would be float but
In Groovy if two floats are involved in operation then the result would be double always.

9. In Java There is no Support For Operator Overloading but in Groovy Operator Overloading is there.
	for Example :: Please Refer Code in Operator -> Operator_Overloading Folder.

10. In Java '' is used for characters and "" is used for String, so if we put String in '' then Java gives error
but in Groovy if we Write String in '' then it will execute properly and provided expected Result.
	For ex: String s1 = '10';
		String s2 = '20';
		System.out.println(s1 + s2);  it will execute in groovy but not in java.

*********************************************************************************************************************************************************************


Here is the Basic Example to showcase the Differnce between writting code in Java and Groovy ::
<--------------------------------------------------------------------------------------------------->

Java Code 
*****************
import java.util.Date;

public class JavaCode {

    private Long id;
    private String firstName;
    private String lastName;
    private int age;
    private Date dob;

    // Default Constructor
    public JavaCode() {

    }

    // Constructor with FirstName, LastName and age
    public JavaCode(String firstName, String lastName, int age) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }

    // Constructor with FirstName, LastName and dob
    public JavaCode(String firstName, String lastName, Date dob) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.dob = dob;
    }

    // Constructor with FirstName, LastName, age and dob
    public JavaCode(String firstName, String lastName, int age, Date dob) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.dob = dob;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public Date getDob() {
        return dob;
    }

    public void setDob(Date dob) {
        this.dob = dob;
    }

    public String getFullName() {
        return this.getFirstName() + " " + this.getLastName();
    }

    public void printFullName() {
        System.out.println("FullName :: " + this.getFirstName() + " " + this.getLastName());
    }

    @Override
    public String toString() {
        return "JavaCode{" +
                "id=" + id +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", age=" + age +
                ", dob=" + dob +
                '}';
    }
}


Groovy Code
******************
@groovy.transform.ToString
class GroovyCode {

    Long id
    String firstName
    String lastName
    int age
    Date dob

    String getFullName() {
        this.firstName + " " + this.lastName
    }

    void printFullName() {
        println "FullName ::, $firstName $lastName"
    }

}